// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Drawer should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Drawer />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="tab-container"
        >
          <div
            className="mock-sidebar mock-sidebar-hide"
          />
          <div
            className="tab tab-hide"
          >
            <i
              className="fas fa-bars drawer-view-btn"
              onClick={[Function]}
            />
          </div>
        </div>,
        <div>
          <Form
            handleResult={[Function]}
          />
          <ExampleContainer
            example={Object {}}
          />
        </div>,
      ],
      "className": "drawer drawer-hide",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="mock-sidebar mock-sidebar-hide"
            />,
            <div
              className="tab tab-hide"
            >
              <i
                className="fas fa-bars drawer-view-btn"
                onClick={[Function]}
              />
            </div>,
          ],
          "className": "tab-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "mock-sidebar mock-sidebar-hide",
            },
            "ref": null,
            "rendered": null,
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <i
                className="fas fa-bars drawer-view-btn"
                onClick={[Function]}
              />,
              "className": "tab tab-hide",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-bars drawer-view-btn",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Form
              handleResult={[Function]}
            />,
            <ExampleContainer
              example={Object {}}
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "handleResult": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "example": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="tab-container"
          >
            <div
              className="mock-sidebar mock-sidebar-hide"
            />
            <div
              className="tab tab-hide"
            >
              <i
                className="fas fa-bars drawer-view-btn"
                onClick={[Function]}
              />
            </div>
          </div>,
          <div>
            <Form
              handleResult={[Function]}
            />
            <ExampleContainer
              example={Object {}}
            />
          </div>,
        ],
        "className": "drawer drawer-hide",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="mock-sidebar mock-sidebar-hide"
              />,
              <div
                className="tab tab-hide"
              >
                <i
                  className="fas fa-bars drawer-view-btn"
                  onClick={[Function]}
                />
              </div>,
            ],
            "className": "tab-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "mock-sidebar mock-sidebar-hide",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <i
                  className="fas fa-bars drawer-view-btn"
                  onClick={[Function]}
                />,
                "className": "tab tab-hide",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "fas fa-bars drawer-view-btn",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Form
                handleResult={[Function]}
              />,
              <ExampleContainer
                example={Object {}}
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "handleResult": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "example": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
